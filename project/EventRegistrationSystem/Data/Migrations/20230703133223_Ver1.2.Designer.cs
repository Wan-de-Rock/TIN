// <auto-generated />
using System;
using EventRegistrationSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventRegistrationSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230703133223_Ver1.2")]
    partial class Ver12
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EventRegistrationSystem.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NumberOfMembers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Artist");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailAddress = "arch@enemy.com",
                            Name = "Arch Enemy",
                            NumberOfMembers = 5
                        },
                        new
                        {
                            Id = 2,
                            EmailAddress = "soad@rock.com",
                            Name = "System Of A Down",
                            NumberOfMembers = 4
                        },
                        new
                        {
                            Id = 3,
                            EmailAddress = "metallica@mail.com",
                            Name = "Metallica",
                            NumberOfMembers = 4
                        },
                        new
                        {
                            Id = 4,
                            EmailAddress = "lumen@mail.ru",
                            Name = "Lumen",
                            NumberOfMembers = 5
                        },
                        new
                        {
                            Id = 5,
                            EmailAddress = "slot@mail.ru",
                            Name = "Slot",
                            NumberOfMembers = 5
                        },
                        new
                        {
                            Id = 6,
                            EmailAddress = "kazka@mail.ua",
                            Name = "KAZKA",
                            NumberOfMembers = 3
                        });
                });

            modelBuilder.Entity("EventRegistrationSystem.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Some description",
                            Name = "Coachella"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lollapalooza is a 4-Day music festival happening August 3-6, 2023 at historic Grant Park in Chicago, Illinois, USA.",
                            Name = "Lollapalooza"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rock in Rio is a recurring music festival originating in Rio de Janeiro, Brazil. It later branched into other locations such as Lisbon, Madrid and Las Vegas.",
                            Name = "Rock in Rio"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tomorrowland is a large-scale annual electronic dance music festival held at De Schorre provincial recreational park in Boom, Antwerp Province, Belgium.",
                            Name = "Tomorrowland"
                        });
                });

            modelBuilder.Entity("EventRegistrationSystem.Models.Performance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("QueuePosition")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TimeOfEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TimeOfStart")
                        .IsRequired()
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("EventId");

                    b.ToTable("Performance");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = 1,
                            EventId = 3,
                            QueuePosition = 1,
                            TimeOfEnd = new TimeSpan(0, 17, 0, 0, 0),
                            TimeOfStart = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = 2,
                            EventId = 3,
                            QueuePosition = 2,
                            TimeOfStart = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            ArtistId = 6,
                            EventId = 2,
                            QueuePosition = 1,
                            TimeOfStart = new TimeSpan(0, 19, 30, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            ArtistId = 5,
                            EventId = 4,
                            QueuePosition = 2,
                            TimeOfStart = new TimeSpan(0, 19, 40, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            ArtistId = 1,
                            EventId = 1,
                            QueuePosition = 1,
                            TimeOfStart = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            ArtistId = 3,
                            EventId = 1,
                            QueuePosition = 2,
                            TimeOfStart = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            ArtistId = 2,
                            EventId = 1,
                            QueuePosition = 3,
                            TimeOfStart = new TimeSpan(0, 20, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            ArtistId = 4,
                            EventId = 1,
                            QueuePosition = 4,
                            TimeOfStart = new TimeSpan(0, 20, 45, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            ArtistId = 3,
                            EventId = 3,
                            QueuePosition = 3,
                            TimeOfStart = new TimeSpan(0, 21, 38, 0, 0)
                        });
                });

            modelBuilder.Entity("EventRegistrationSystem.Models.Performance", b =>
                {
                    b.HasOne("EventRegistrationSystem.Models.Artist", "Artist")
                        .WithMany("Performances")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrationSystem.Models.Event", "Event")
                        .WithMany("Performances")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrationSystem.Models.Artist", b =>
                {
                    b.Navigation("Performances");
                });

            modelBuilder.Entity("EventRegistrationSystem.Models.Event", b =>
                {
                    b.Navigation("Performances");
                });
#pragma warning restore 612, 618
        }
    }
}
